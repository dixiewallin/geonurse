import pandas as pd
import re
from collections import Counter
import streamlit as st
from openai import OpenAI
import config  # Importera config.py
import os

st.title("Nurse Bot")

# Ange den fullständiga sökvägen till CSV-filen
csv_file_path = os.path.join(os.path.dirname(__file__), "2023.csv")

# Läs in data från CSV-filen med rätt separator och specifiera kolumnnamn
data = pd.read_csv(csv_file_path, sep=";", names=[
    "Id", "Headline", "Application_deadline", "Amount", "Description", 
    "Type", "Salary", "Duration", "Working_hours", "Region", "Municipality", 
    "Employer_name", "Employer_workplace", "Publication_date"
])

# Funktion för att extrahera sjukskötersketyp från Headline
def extract_nurse_type(headline):
    # Använd regular expressions för att extrahera potentiella sjukskötersketyper
    match = re.search(r'\b(sjuksköterska|barnmorska|anestesisjuksköterska|operationssjuksköterska|röntgensjuksköterska|intensivvårdssjuksköterska|distriktssköterska|psykiatrisjuksköterska)\b', headline.lower())
    return match.group(0) if match else None

# Extrahera sjukskötersketyp
data['Nurse_type'] = data['Headline'].apply(extract_nurse_type)

# Ta bort NaN-värden
data = data.dropna(subset=['Nurse_type'])

# Räkna förekomsten av varje sjukskötersketyp
nurse_type_counts = Counter(data['Nurse_type'])

# Filtrera ut sjukskötersketyper som förekommer mer än fem gånger
common_nurse_types = [nurse for nurse, count in nurse_type_counts.items() if count > 5]

# Konvertera alla värden i kolumnerna till små bokstäver för enhetlighet
data['Municipality'] = data['Municipality'].str.lower()
data['Working_hours'] = data['Working_hours'].astype(str).str.lower()
data['Type'] = data['Type'].str.lower()

# Funktion för att hantera användarens val av stad
def get_municipality_choice(user_input):
    municipalities = data['Municipality'].unique()
    if user_input.lower() in municipalities:
        return user_input.lower()
    else:
        return None

# Funktion för att hantera användarens val av sjukskötersketyp
def get_nurse_type_choice(user_input):
    if user_input.lower() in common_nurse_types:
        return user_input.lower()
    else:
        return None

# Funktion för att hantera användarens val av arbetstid
def get_working_hours_choice(user_input):
    working_hours_types = data['Working_hours'].dropna().unique()
    if user_input.lower() in working_hours_types:
        return user_input.lower()
    else:
        return None

client = OpenAI(api_key=config.OPENAI_API_KEY)  # Använd API-nyckeln från config.py

if "openai_model" not in st.session_state:
    st.session_state["openai_model"] = "gpt-3.5-turbo"

if "messages" not in st.session_state:
    st.session_state.messages = []

# Visa ett välkomstmeddelande
if not st.session_state.messages:
    welcome_message = "Välkommen till Nurse Bot! Ange vilken stad du vill jobba i."
    st.session_state.messages.append({"role": "assistant", "content": welcome_message})

for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

if prompt := st.chat_input("Skriv din fråga här..."):
    st.session_state.messages.append({"role": "user", "content": prompt})
    with st.chat_message("user"):
        st.markdown(prompt)

    if "selected_city" not in st.session_state:
        selected_city = get_municipality_choice(prompt)
        if selected_city:
            st.session_state.selected_city = selected_city
            response = f"Du har valt {selected_city.capitalize()}.\nVilken typ av sjuksköterska är du intresserad av? Här är alternativen:\n"
            for nurse_type in common_nurse_types:
                response += f"- {nurse_type.capitalize()}\n"
        else:
            response = "Staden finns inte i våran lista! Försök igen."
    elif "selected_nurse_type" not in st.session_state:
        selected_nurse_type = get_nurse_type_choice(prompt)
        if selected_nurse_type:
            st.session_state.selected_nurse_type = selected_nurse_type
            response = f"Du har valt {selected_nurse_type.capitalize()}.\nVill du jobba heltid eller deltid?\n"
        else:
            response = "Denna typ av sjuksköterska finns inte i våran lista! Försök igen."
    elif "selected_working_hours" not in st.session_state:
        selected_working_hours = get_working_hours_choice(prompt)
        if selected_working_hours:
            st.session_state.selected_working_hours = selected_working_hours
            response = ""
            filtered_data = data[
                (data['Municipality'] == st.session_state.selected_city) &
                (data['Nurse_type'] == st.session_state.selected_nurse_type) &
                (data['Working_hours'] == st.session_state.selected_working_hours)
            ]
            if not filtered_data.empty:
                response += f"Resultat för jobb i {st.session_state.selected_city.capitalize()} som {st.session_state.selected_nurse_type.capitalize()} med {st.session_state.selected_working_hours} arbetstid:\n\n"
                for index, row in filtered_data.iterrows():
                    job_info = f"- **Id:** {row['Id']} **Titel:** {row['Headline']} **Beskrivning:** {row['Description'][:100]}...\n"
                    response += job_info
            else:
                response += f"Inga jobb hittades i {st.session_state.selected_city.capitalize()} som {st.session_state.selected_nurse_type.capitalize()} med {st.session_state.selected_working_hours} arbetstid."
        else:
            response = "Denna arbetstid finns inte i våran lista! Försök igen."

    with st.chat_message("assistant"):
        st.markdown(response)

    st.session_state.messages.append({"role": "assistant", "content": response})

